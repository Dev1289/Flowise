{
  "nodes": [
    {
      "width": 300,
      "height": 376,
      "id": "bufferMemory_0",
      "position": {
        "x": -375.5681197087162,
        "y": 327.04704246002825
      },
      "type": "customNode",
      "data": {
        "id": "bufferMemory_0",
        "label": "Buffer Memory",
        "version": 1,
        "name": "bufferMemory",
        "type": "BufferMemory",
        "baseClasses": [
          "BufferMemory",
          "BaseChatMemory",
          "BaseMemory"
        ],
        "category": "Memory",
        "description": "Remembers previous conversational back and forths directly",
        "inputParams": [
          {
            "label": "Memory Key",
            "name": "memoryKey",
            "type": "string",
            "default": "chat_history",
            "id": "bufferMemory_0-input-memoryKey-string"
          },
          {
            "label": "Input Key",
            "name": "inputKey",
            "type": "string",
            "default": "input",
            "id": "bufferMemory_0-input-inputKey-string"
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "memoryKey": "chat_history",
          "inputKey": "input"
        },
        "outputAnchors": [
          {
            "id": "bufferMemory_0-output-bufferMemory-BufferMemory|BaseChatMemory|BaseMemory",
            "name": "bufferMemory",
            "label": "BufferMemory",
            "type": "BufferMemory | BaseChatMemory | BaseMemory"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "selected": false,
      "positionAbsolute": {
        "x": -375.5681197087162,
        "y": 327.04704246002825
      },
      "dragging": false
    },
    {
      "width": 300,
      "height": 433,
      "id": "conversationChain_0",
      "position": {
        "x": 958.9887390513221,
        "y": 318.8734467468765
      },
      "type": "customNode",
      "data": {
        "id": "conversationChain_0",
        "label": "Conversation Chain",
        "version": 3,
        "name": "conversationChain",
        "type": "ConversationChain",
        "baseClasses": [
          "ConversationChain",
          "LLMChain",
          "BaseChain",
          "Runnable"
        ],
        "category": "Chains",
        "description": "Chat models specific conversational chain with memory",
        "inputParams": [
          {
            "label": "System Message",
            "name": "systemMessagePrompt",
            "type": "string",
            "rows": 4,
            "description": "If Chat Prompt Template is provided, this will be ignored",
            "additionalParams": true,
            "optional": true,
            "default": "The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.",
            "placeholder": "The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.",
            "id": "conversationChain_0-input-systemMessagePrompt-string"
          }
        ],
        "inputAnchors": [
          {
            "label": "Chat Model",
            "name": "model",
            "type": "BaseChatModel",
            "id": "conversationChain_0-input-model-BaseChatModel"
          },
          {
            "label": "Memory",
            "name": "memory",
            "type": "BaseMemory",
            "id": "conversationChain_0-input-memory-BaseMemory"
          },
          {
            "label": "Chat Prompt Template",
            "name": "chatPromptTemplate",
            "type": "ChatPromptTemplate",
            "description": "Override existing prompt with Chat Prompt Template. Human Message must includes {input} variable",
            "optional": true,
            "id": "conversationChain_0-input-chatPromptTemplate-ChatPromptTemplate"
          },
          {
            "label": "Input Moderation",
            "description": "Detect text that could generate harmful output and prevent it from being sent to the language model",
            "name": "inputModeration",
            "type": "Moderation",
            "optional": true,
            "list": true,
            "id": "conversationChain_0-input-inputModeration-Moderation"
          }
        ],
        "inputs": {
          "inputModeration": "",
          "model": "{{chatOpenAI_0.data.instance}}",
          "memory": "{{RedisBackedChatMemory_0.data.instance}}",
          "chatPromptTemplate": "{{chatPromptTemplate_0.data.instance}}",
          "systemMessagePrompt": "The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know."
        },
        "outputAnchors": [
          {
            "id": "conversationChain_0-output-conversationChain-ConversationChain|LLMChain|BaseChain|Runnable",
            "name": "conversationChain",
            "label": "ConversationChain",
            "type": "ConversationChain | LLMChain | BaseChain | Runnable"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "selected": false,
      "positionAbsolute": {
        "x": 958.9887390513221,
        "y": 318.8734467468765
      },
      "dragging": false
    },
    {
      "width": 300,
      "height": 686,
      "id": "chatPromptTemplate_0",
      "position": {
        "x": -20.966557553985325,
        "y": 687.210413673822
      },
      "type": "customNode",
      "data": {
        "id": "chatPromptTemplate_0",
        "label": "Chat Prompt Template",
        "version": 1,
        "name": "chatPromptTemplate",
        "type": "ChatPromptTemplate",
        "baseClasses": [
          "ChatPromptTemplate",
          "BaseChatPromptTemplate",
          "BasePromptTemplate",
          "Runnable"
        ],
        "category": "Prompts",
        "description": "Schema to represent a chat prompt",
        "inputParams": [
          {
            "label": "System Message",
            "name": "systemMessagePrompt",
            "type": "string",
            "rows": 4,
            "placeholder": "You are a helpful assistant that translates {input_language} to {output_language}.",
            "id": "chatPromptTemplate_0-input-systemMessagePrompt-string"
          },
          {
            "label": "Human Message",
            "name": "humanMessagePrompt",
            "type": "string",
            "rows": 4,
            "placeholder": "{text}",
            "id": "chatPromptTemplate_0-input-humanMessagePrompt-string"
          },
          {
            "label": "Format Prompt Values",
            "name": "promptValues",
            "type": "json",
            "optional": true,
            "acceptVariable": true,
            "list": true,
            "id": "chatPromptTemplate_0-input-promptValues-json"
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "systemMessagePrompt": "instruction = \"\"\"\nYou are Virtual AI friendly food order Assistant for Spice Delight Restaurant and and dont reply anything other than food related queries. Your goal is to assist customers in placing their food orders for the restaurant accurately and efficiently. Here's how you should operate and follow as per the customer inputs:\n\n1. Greeting and Introduction:\n    - Welcome the customer and ask for their name in a friendly manner.\n\n2. Taking Orders:\n    - After the customer provides their name, firstly inform them about the ongoing offers or combo offers available in the food menu.\n    - Present only the available food menu options and items, special offers, and suggest additional items.\n    - Prompt for item selection and quantity, only if the customer chooses induvidual items from the food menu.\n    - If the customer choose combo offers, ask how many such combos do you want or are you sure of one combo?.\n\n3. Order Confirmation:\n    - Summarize the order for confirmation.\n    - Ask if the customer wants to make any changes.\n    - List items with names, quantities, and customizations.\n    - Confirm the entire order.\n \n4. Delivery or Pickup Information:\n    - Always Request delivery or pickup details.\n    - For delivery, ask for the customer's address.\n    - For pickup, confirm the pickup location at 123 Main Street, Dallas, USA.\n    - Provide an estimated time of not less than 30 minutes either for delivery or pickup.\n\n5. Payment Method:\n    - Always Tell the customer that the \"payment link will be sent to your registered mobile number\" and don't ask for any phone number.\n\n6. Order Summary:\n    - Always make sure to Conclude or end the conversation with an Order Summary that includes\\\n      Customer Name:, \\\n      Order Number:, \\\n      Items:, \\\n      Total price:, \\\n      Payment Mode:, \\\n      Pickup/Delivery:\\\n      Finally, Thank the customer for choosing Hungry Haven Cafe and assure them of a delicious meal.\n\nFollow all the above steps from 1-6 efficiently and diligently.\"\"\"\n\n\nFood Menu:\n\nStarters:\n\nPaneer Tikka: $8.95\nSamosas: $6.50\nVegetable Pakoras: $7.25\nChicken Tikka: $10.95\nAloo Tikki: $5.95\nMain Course Curry's (Veg):\n\nPaneer Butter Masala: $12.50\nDal Makhani: $10.75\nPalak Paneer: $11.25\nGobi Masala: $9.95\nMain Course Curry's (Non-veg):\n\nChicken Curry: $14.95\nLamb Rogan Josh: $16.50\nFish Tikka Masala: $15.75\nButter Chicken: $13.95\nShrimp Vindaloo: $17.25\nChicken Biryani: $15.00\nBiryani's:\n\nChicken Biryani: $15.99\nMutton Biryani: $16.99\nVeg Biryani: $13.99\nDesserts:\n\nGulab Jamun: $5.00\nRice Kheer: $6.05\nMango Lassi: $4.00\nRasmalai: $6.00\nKulfi: $4.50\nSides:\n\nGarlic Naan: $3.00\nJeera Rice: $4.00\nPapadum: $2.50\nMixed Pickle: $2.25\nCucumber Raita: $2.50\nBeverages:\n\nCoke: $2.99\nMango Lassi: $3.50\nMineral Water (500ml): $2.50\nSoda (Can): $1.50\nSweet Lassi: $3.00\nOffers:\n\nSide Offer: \"Order any Main Course Curry(Non-Veg) and get a complimentary Garlic Naan.\"\nDessert Offer: \"Order any Biryani and get a Gulab Jamun for free.\"\nBiryani Combo: \"Order Chicken Biryani, Butter Chicken, Gulab Jamun, and Coke for $30.00 only.\"",
          "humanMessagePrompt": "{input}",
          "promptValues": "{\"context\":\"\",\"input\":\"{{question}}\"}"
        },
        "outputAnchors": [
          {
            "id": "chatPromptTemplate_0-output-chatPromptTemplate-ChatPromptTemplate|BaseChatPromptTemplate|BasePromptTemplate|Runnable",
            "name": "chatPromptTemplate",
            "label": "ChatPromptTemplate",
            "type": "ChatPromptTemplate | BaseChatPromptTemplate | BasePromptTemplate | Runnable"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "selected": false,
      "positionAbsolute": {
        "x": -20.966557553985325,
        "y": 687.210413673822
      },
      "dragging": false
    },
    {
      "width": 300,
      "height": 484,
      "id": "plainText_0",
      "position": {
        "x": -1362.4720781557282,
        "y": 371.52296718590276
      },
      "type": "customNode",
      "data": {
        "id": "plainText_0",
        "label": "Plain Text",
        "version": 2,
        "name": "plainText",
        "type": "Document",
        "baseClasses": [
          "Document"
        ],
        "category": "Document Loaders",
        "description": "Load data from plain text",
        "inputParams": [
          {
            "label": "Text",
            "name": "text",
            "type": "string",
            "rows": 4,
            "placeholder": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua...",
            "id": "plainText_0-input-text-string"
          },
          {
            "label": "Metadata",
            "name": "metadata",
            "type": "json",
            "optional": true,
            "additionalParams": true,
            "id": "plainText_0-input-metadata-json"
          }
        ],
        "inputAnchors": [
          {
            "label": "Text Splitter",
            "name": "textSplitter",
            "type": "TextSplitter",
            "optional": true,
            "id": "plainText_0-input-textSplitter-TextSplitter"
          }
        ],
        "inputs": {
          "text": "Categories: {\n    Starters: {\n        Paneer Tikka: 8.95,\n        Samosas: 6.50,\n        Vegetable Pakoras: 7.25,\n        Chicken Tikka: 10.95,\n        Aloo Tikki: 5.95\n    },\n    Main Course Curry's (Veg): {\n        Paneer Butter Masala: 12.50,\n        Dal Makhani: 10.75,\n        Palak Paneer: 11.25,\n        Gobi Masala: 9.95\n    },\n    Main Course Curry's (Non-veg): {\n        Chicken Curry: 14.95,\n        Lamb Rogan Josh: 16.50,\n        Fish Tikka Masala: 15.75,\n        Butter Chicken: 13.95,\n        Shrimp Vindaloo: 17.25,\n        Chicken Biryani: 15.00\n    },\n    Biryani's: {\n        Chicken Biryani: 15.99,\n        Mutton Biryani: 16.99,\n        Veg Biryani: 13.99\n    },\n    Desserts: {\n        Gulab Jamun: 5.00,\n        Rice Kheer: 6.05,\n        Mango Lassi: 4.00,\n        Rasmalai: 6.00,\n        Kulfi: 4.50\n    },\n    Sides: {\n        Garlic Naan: 3.00,\n        Jeera Rice: 4.00,\n        Papadum: 2.50,\n        Mixed Pickle: 2.25,\n        Cucumber Raita: 2.50\n    },\n    Beverages: {\n        Coke: 2.99,\n        Mango Lassi: 3.50,\n        Mineral Water (500ml): 2.50,\n        Soda (Can): 1.50,\n        Sweet Lassi: 3.00\n    }\n},\nOffers: {\n    Side Offer: \"Order any Main Course Curry(Non-Veg) and get a complimentary Garlic Naan.\",\n    Desert Offer: \"Order any Biryani and get a Gulab Jamun for free.\",\n    Biryani Combo: \"Order Chicken Biryani, Butter Chicken , Gulab Jamun and Coke for $30.00 only.\"\n}\n",
          "textSplitter": "",
          "metadata": ""
        },
        "outputAnchors": [
          {
            "name": "output",
            "label": "Output",
            "type": "options",
            "options": [
              {
                "id": "plainText_0-output-document-Document|json",
                "name": "document",
                "label": "Document",
                "type": "Document | json"
              },
              {
                "id": "plainText_0-output-text-string|json",
                "name": "text",
                "label": "Text",
                "type": "string | json"
              }
            ],
            "default": "document"
          }
        ],
        "outputs": {
          "output": "text"
        },
        "selected": false
      },
      "selected": false,
      "positionAbsolute": {
        "x": -1362.4720781557282,
        "y": 371.52296718590276
      },
      "dragging": false
    },
    {
      "id": "chatOpenAI_0",
      "position": {
        "x": -47.65456830025566,
        "y": -361.8849869902367
      },
      "type": "customNode",
      "data": {
        "id": "chatOpenAI_0",
        "label": "ChatOpenAI",
        "version": 5,
        "name": "chatOpenAI",
        "type": "ChatOpenAI",
        "baseClasses": [
          "ChatOpenAI",
          "BaseChatModel",
          "BaseLanguageModel",
          "Runnable"
        ],
        "category": "Chat Models",
        "description": "Wrapper around OpenAI large language models that use the Chat endpoint",
        "inputParams": [
          {
            "label": "Connect Credential",
            "name": "credential",
            "type": "credential",
            "credentialNames": [
              "openAIApi"
            ],
            "id": "chatOpenAI_0-input-credential-credential"
          },
          {
            "label": "Model Name",
            "name": "modelName",
            "type": "options",
            "options": [
              {
                "label": "gpt-4",
                "name": "gpt-4"
              },
              {
                "label": "gpt-4-turbo-preview",
                "name": "gpt-4-turbo-preview"
              },
              {
                "label": "gpt-4-0125-preview",
                "name": "gpt-4-0125-preview"
              },
              {
                "label": "gpt-4-1106-preview",
                "name": "gpt-4-1106-preview"
              },
              {
                "label": "gpt-4-1106-vision-preview",
                "name": "gpt-4-1106-vision-preview"
              },
              {
                "label": "gpt-4-vision-preview",
                "name": "gpt-4-vision-preview"
              },
              {
                "label": "gpt-4-0613",
                "name": "gpt-4-0613"
              },
              {
                "label": "gpt-4-32k",
                "name": "gpt-4-32k"
              },
              {
                "label": "gpt-4-32k-0613",
                "name": "gpt-4-32k-0613"
              },
              {
                "label": "gpt-3.5-turbo",
                "name": "gpt-3.5-turbo"
              },
              {
                "label": "gpt-3.5-turbo-0125",
                "name": "gpt-3.5-turbo-0125"
              },
              {
                "label": "gpt-3.5-turbo-1106",
                "name": "gpt-3.5-turbo-1106"
              },
              {
                "label": "gpt-3.5-turbo-0613",
                "name": "gpt-3.5-turbo-0613"
              },
              {
                "label": "gpt-3.5-turbo-16k",
                "name": "gpt-3.5-turbo-16k"
              },
              {
                "label": "gpt-3.5-turbo-16k-0613",
                "name": "gpt-3.5-turbo-16k-0613"
              }
            ],
            "default": "gpt-3.5-turbo",
            "optional": true,
            "id": "chatOpenAI_0-input-modelName-options"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "step": 0.1,
            "default": 0.9,
            "optional": true,
            "id": "chatOpenAI_0-input-temperature-number"
          },
          {
            "label": "Max Tokens",
            "name": "maxTokens",
            "type": "number",
            "step": 1,
            "optional": true,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-maxTokens-number"
          },
          {
            "label": "Top Probability",
            "name": "topP",
            "type": "number",
            "step": 0.1,
            "optional": true,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-topP-number"
          },
          {
            "label": "Frequency Penalty",
            "name": "frequencyPenalty",
            "type": "number",
            "step": 0.1,
            "optional": true,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-frequencyPenalty-number"
          },
          {
            "label": "Presence Penalty",
            "name": "presencePenalty",
            "type": "number",
            "step": 0.1,
            "optional": true,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-presencePenalty-number"
          },
          {
            "label": "Timeout",
            "name": "timeout",
            "type": "number",
            "step": 1,
            "optional": true,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-timeout-number"
          },
          {
            "label": "BasePath",
            "name": "basepath",
            "type": "string",
            "optional": true,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-basepath-string"
          },
          {
            "label": "BaseOptions",
            "name": "baseOptions",
            "type": "json",
            "optional": true,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-baseOptions-json"
          },
          {
            "label": "Allow Image Uploads",
            "name": "allowImageUploads",
            "type": "boolean",
            "description": "Automatically uses gpt-4-vision-preview when image is being uploaded from chat. Only works with LLMChain, Conversation Chain, ReAct Agent, and Conversational Agent",
            "default": false,
            "optional": true,
            "id": "chatOpenAI_0-input-allowImageUploads-boolean"
          },
          {
            "label": "Image Resolution",
            "description": "This parameter controls the resolution in which the model views the image.",
            "name": "imageResolution",
            "type": "options",
            "options": [
              {
                "label": "Low",
                "name": "low"
              },
              {
                "label": "High",
                "name": "high"
              },
              {
                "label": "Auto",
                "name": "auto"
              }
            ],
            "default": "low",
            "optional": false,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-imageResolution-options"
          }
        ],
        "inputAnchors": [
          {
            "label": "Cache",
            "name": "cache",
            "type": "BaseCache",
            "optional": true,
            "id": "chatOpenAI_0-input-cache-BaseCache"
          }
        ],
        "inputs": {
          "cache": "",
          "modelName": "gpt-3.5-turbo",
          "temperature": 0.9,
          "maxTokens": "3000",
          "topP": "",
          "frequencyPenalty": "",
          "presencePenalty": "",
          "timeout": "",
          "basepath": "",
          "baseOptions": "",
          "allowImageUploads": false,
          "imageResolution": "low"
        },
        "outputAnchors": [
          {
            "id": "chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable",
            "name": "chatOpenAI",
            "label": "ChatOpenAI",
            "description": "Wrapper around OpenAI large language models that use the Chat endpoint",
            "type": "ChatOpenAI | BaseChatModel | BaseLanguageModel | Runnable"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 300,
      "height": 670,
      "selected": false,
      "positionAbsolute": {
        "x": -47.65456830025566,
        "y": -361.8849869902367
      },
      "dragging": false
    },
    {
      "id": "textFile_0",
      "position": {
        "x": -1343.6193949393328,
        "y": 895.3894985369362
      },
      "type": "customNode",
      "data": {
        "id": "textFile_0",
        "label": "Text File",
        "version": 3,
        "name": "textFile",
        "type": "Document",
        "baseClasses": [
          "Document"
        ],
        "category": "Document Loaders",
        "description": "Load data from text files",
        "inputParams": [
          {
            "label": "Txt File",
            "name": "txtFile",
            "type": "file",
            "fileType": ".txt, .html, .aspx, .asp, .cpp, .c, .cs, .css, .go, .h, .java, .js, .less, .ts, .php, .proto, .python, .py, .rst, .ruby, .rb, .rs, .scala, .sc, .scss, .sol, .sql, .swift, .markdown, .md, .tex, .ltx, .vb, .xml",
            "id": "textFile_0-input-txtFile-file"
          },
          {
            "label": "Metadata",
            "name": "metadata",
            "type": "json",
            "optional": true,
            "additionalParams": true,
            "id": "textFile_0-input-metadata-json"
          }
        ],
        "inputAnchors": [
          {
            "label": "Text Splitter",
            "name": "textSplitter",
            "type": "TextSplitter",
            "optional": true,
            "id": "textFile_0-input-textSplitter-TextSplitter"
          }
        ],
        "inputs": {
          "textSplitter": "",
          "metadata": ""
        },
        "outputAnchors": [
          {
            "name": "output",
            "label": "Output",
            "type": "options",
            "description": "Array of document objects containing metadata and pageContent",
            "options": [
              {
                "id": "textFile_0-output-document-Document|json",
                "name": "document",
                "label": "Document",
                "description": "Array of document objects containing metadata and pageContent",
                "type": "Document | json"
              },
              {
                "id": "textFile_0-output-text-string|json",
                "name": "text",
                "label": "Text",
                "description": "Concatenated string from pageContent of documents",
                "type": "string | json"
              }
            ],
            "default": "document"
          }
        ],
        "outputs": {
          "output": "document"
        },
        "selected": false
      },
      "width": 300,
      "height": 436,
      "selected": false,
      "positionAbsolute": {
        "x": -1343.6193949393328,
        "y": 895.3894985369362
      },
      "dragging": false
    },
    {
      "id": "RedisBackedChatMemory_0",
      "position": {
        "x": -20.179413636427014,
        "y": 344.4136639570239
      },
      "type": "customNode",
      "data": {
        "id": "RedisBackedChatMemory_0",
        "label": "Redis-Backed Chat Memory",
        "version": 2,
        "name": "RedisBackedChatMemory",
        "type": "RedisBackedChatMemory",
        "baseClasses": [
          "RedisBackedChatMemory",
          "BaseChatMemory",
          "BaseMemory"
        ],
        "category": "Memory",
        "description": "Summarizes the conversation and stores the memory in Redis server",
        "inputParams": [
          {
            "label": "Connect Credential",
            "name": "credential",
            "type": "credential",
            "optional": true,
            "credentialNames": [
              "redisCacheApi",
              "redisCacheUrlApi"
            ],
            "id": "RedisBackedChatMemory_0-input-credential-credential"
          },
          {
            "label": "Session Id",
            "name": "sessionId",
            "type": "string",
            "description": "If not specified, a random id will be used. Learn <a target=\"_blank\" href=\"https://docs.flowiseai.com/memory/long-term-memory#ui-and-embedded-chat\">more</a>",
            "default": "",
            "additionalParams": true,
            "optional": true,
            "id": "RedisBackedChatMemory_0-input-sessionId-string"
          },
          {
            "label": "Session Timeouts",
            "name": "sessionTTL",
            "type": "number",
            "description": "Omit this parameter to make sessions never expire",
            "additionalParams": true,
            "optional": true,
            "id": "RedisBackedChatMemory_0-input-sessionTTL-number"
          },
          {
            "label": "Memory Key",
            "name": "memoryKey",
            "type": "string",
            "default": "chat_history",
            "additionalParams": true,
            "id": "RedisBackedChatMemory_0-input-memoryKey-string"
          },
          {
            "label": "Window Size",
            "name": "windowSize",
            "type": "number",
            "description": "Window of size k to surface the last k back-and-forth to use as memory.",
            "additionalParams": true,
            "optional": true,
            "id": "RedisBackedChatMemory_0-input-windowSize-number"
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "sessionId": "",
          "sessionTTL": "",
          "memoryKey": "chat_history",
          "windowSize": ""
        },
        "outputAnchors": [
          {
            "id": "RedisBackedChatMemory_0-output-RedisBackedChatMemory-RedisBackedChatMemory|BaseChatMemory|BaseMemory",
            "name": "RedisBackedChatMemory",
            "label": "RedisBackedChatMemory",
            "description": "Summarizes the conversation and stores the memory in Redis server",
            "type": "RedisBackedChatMemory | BaseChatMemory | BaseMemory"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 300,
      "height": 328,
      "selected": false,
      "positionAbsolute": {
        "x": -20.179413636427014,
        "y": 344.4136639570239
      },
      "dragging": false
    }
  ],
  "edges": [
    {
      "source": "chatPromptTemplate_0",
      "sourceHandle": "chatPromptTemplate_0-output-chatPromptTemplate-ChatPromptTemplate|BaseChatPromptTemplate|BasePromptTemplate|Runnable",
      "target": "conversationChain_0",
      "targetHandle": "conversationChain_0-input-chatPromptTemplate-ChatPromptTemplate",
      "type": "buttonedge",
      "id": "chatPromptTemplate_0-chatPromptTemplate_0-output-chatPromptTemplate-ChatPromptTemplate|BaseChatPromptTemplate|BasePromptTemplate|Runnable-conversationChain_0-conversationChain_0-input-chatPromptTemplate-ChatPromptTemplate"
    },
    {
      "source": "chatOpenAI_0",
      "sourceHandle": "chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable",
      "target": "conversationChain_0",
      "targetHandle": "conversationChain_0-input-model-BaseChatModel",
      "type": "buttonedge",
      "id": "chatOpenAI_0-chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable-conversationChain_0-conversationChain_0-input-model-BaseChatModel"
    },
    {
      "source": "textFile_0",
      "sourceHandle": "textFile_0-output-document-Document|json",
      "target": "chatPromptTemplate_0",
      "targetHandle": "chatPromptTemplate_0-input-promptValues-json",
      "type": "buttonedge",
      "id": "textFile_0-textFile_0-output-document-Document|json-chatPromptTemplate_0-chatPromptTemplate_0-input-promptValues-json"
    },
    {
      "source": "RedisBackedChatMemory_0",
      "sourceHandle": "RedisBackedChatMemory_0-output-RedisBackedChatMemory-RedisBackedChatMemory|BaseChatMemory|BaseMemory",
      "target": "conversationChain_0",
      "targetHandle": "conversationChain_0-input-memory-BaseMemory",
      "type": "buttonedge",
      "id": "RedisBackedChatMemory_0-RedisBackedChatMemory_0-output-RedisBackedChatMemory-RedisBackedChatMemory|BaseChatMemory|BaseMemory-conversationChain_0-conversationChain_0-input-memory-BaseMemory"
    }
  ]
}